//$PRICE > MA150 and $PRICE > MA200
//MA150 > MA200
//MA50 > MA150 > MA200
//$PRICE > (52weekLow($PRICE) * 1.25)
//$PRICE > (52weekHi($PRICE) * 0.75)
//uptrend(MA200, 30days)
//$PRICE > MA50

//$RS > 70
//uptrend($RS, 6weeks)

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© mlcs05

//@version=5
strategy(title="minervini", overlay=true, currency=currency.USD, initial_capital=10000, calc_on_every_tick=true, calc_on_order_fills=true)

//
// TIMEFRAME
START                   = timestamp(1995, 01, 01, 01, 01)
FINISH                  = timestamp(3000, 01, 01, 01, 01)

//
// INPUTS
RUN_STRATEGY            = input.bool(defval=true, title="ENTRY - Run Strategy?")
ENTRY_QUANTITY          = input.int(defval=1, title="ENTRY - Quantity", minval=1, maxval=99999, step=1)
ENTRY_STOP_PERCENT      = input.float(defval=0.05, title="ENTRY - Stop Loss %", minval=0.01, maxval=1.0, step=0.01)
ENTRY_PROFIT_PERCENT    = input.float(defval=0.1, title="ENTRY - Take Profit %", minval=0.01, maxval=1.0, step=0.01)

HI_52_WEEK_RANGE        = input.float(defval=0.25, title="SIGNALS - % below 52 week high", minval=0.05, maxval=0.5, step=0.01)
LO_52_WEEK_RANGE        = input.float(defval=0.25, title="SIGNALS - % above 52 week low", minval=0.05, maxval=0.5, step=0.01)
CONTRACTION_BAR_COUNT   = input.int(defval=40, title="SIGNALS - Contraction Bar Count", minval=5, maxval=200, step=1)
BOLLINGER_BAND_LEN      = input.int(defval=40, title="SIGNALS - Bollinger Band Length", minval=10, maxval=180, step=1)

PLOT_SIGNAL_PARAMS      = input.bool(defval=false, title="PLOT - Plot Signal Params?")
PLOT_VIX                = input.bool(defval=false, title="PLOT - Plot S&P VOLATILITY?")
PLOT_SP500              = input.bool(defval=false, title="PLOT - Plot S&P500?")
PLOT_SCREENERS          = input.bool(defval=false, title="PLOT - Plot Screeners?")


//
// FUNCS

err(msg) =>
    label.new(x=bar_index,y=close,yloc=yloc.abovebar,text=msg,color=color.red,style=label.style_label_up,textcolor=color.white)
    true

get_name(ticker) =>
    array.get(str.split(ticker, ":"), 1)

sig_price_above_ma(ma50, ma150, ma200, opn, cls) => 
    ((opn > ma50) and (cls > ma50) and (opn > ma150) and (opn > ma200) and (cls > ma200) and (cls > ma150))

sig_ma_uptrend(ma50, ma150, ma200) =>
    ((ma50 > ma150) and (ma150 > ma200))

sig_price_in_52wk_range(hi52week, hi52multiplier, low52week, low52multiplier, opn, cls) => 
    hi52diff = hi52week - ((hi52week - low52week) * hi52multiplier)
    low52diff = low52week + ((hi52week - low52week) * low52multiplier)    
    ((opn > low52diff) and (cls > low52diff) and (opn > hi52diff) and (cls > hi52diff))

sig_ma200_uptrend_30days(ma200) => 
    ((ta.change(ma200, 30) > 0.0) and (ta.change(ma200, 15) > 0.0))

sig_bb_contracting(bbwavg, bars) =>
    ta.falling(bbwavg * 1000, bars)
    // NOTE: this was the old "algorithm" - considering comparing the 2 for certain tickers
    //chunk=bars/4
    //((bbwavg[bars] > bbwavg[bars - chunk]) and (bbwavg[bars - chunk] > bbwavg[bars - chunk*2]) and (bbwavg[bars - chunk*2] > bbwavg[bars - chunk*3]) and (bbwavg[bars - chunk*3] > bbwavg[0]))

signals(ma50, ma150, ma200, hi52week, hi52multiplier, low52week, low52multiplier, bbwavg, bars, opn, cls) => 
    s1 = sig_ma200_uptrend_30days(ma200)
    s2 = sig_ma_uptrend(ma50, ma150, ma200)
    s3 = sig_price_above_ma(ma50, ma150, ma200, opn, cls)
    s4 = sig_price_in_52wk_range(hi52week, hi52multiplier, low52week, low52multiplier, opn, cls)
    s5 = sig_bb_contracting(bbwavg, bars)
    [s5, s4, s3, s2, s1]

signal_count(s1, s2, s3, s4, s5)=>
    int ct = 0
    if s1
        ct:=ct+1
    if s2
        ct:=ct+1
    if s3 
        ct:=ct+1
    if s4
        ct:=ct+1
    if s5
        ct:=ct+1
    ct

single_signal(sig_ct)=>(sig_ct==1)

double_signal(sig_ct)=>(sig_ct==2)

triple_signal(sig_ct)=>(sig_ct==3)

quad_signal(sig_ct)=>(sig_ct==4)

optimum(sig_ct)=>(sig_ct==5)

color_from_sigs(sigct)=>
    if (single_signal(sigct))
        color.navy
    else if (double_signal(sigct))
        color.aqua
    else if (triple_signal(sigct))
        color.lime
    else if (quad_signal(sigct))
        color.yellow
    else if (optimum(sigct))
        color.white
    else
        color.gray

in_time_window(start, finish) =>
    (time >= start and time <= finish)

check_alerts(ticker, sigct) =>
    if (optimum(sigct))
        alert(message = "OPTIMUM: " + str.tostring(ticker), freq = alert.freq_once_per_bar_close)
    else if (quad_signal(sigct))
        alert(message = "Excellent: " + str.tostring(ticker), freq = alert.freq_once_per_bar_close)
    else if (triple_signal(sigct))
        alert(message = "Good: " + str.tostring(ticker), freq = alert.freq_once_per_bar_close)

screener_function(bblen=20) =>
    [ta.ema(close, 3), ta.sma(close, 50), ta.sma(close, 150), ta.sma(close, 200), ta.highest(high, 251), ta.lowest(low, 251), ta.ema(ta.bbw(close, bblen, 3), bblen), open, close, low, high, bar_index]

mark_order(order_type, ticker, ticker_close, ticker_index, price = 0.0)=>
    suffix = price > 0.0 ? str.tostring(price) + ":" + str.tostring(ticker) : ""
    if (order_type == "buy")
        ptext = "#" + suffix
        label.new(x=ticker_index,y=ticker_close,yloc=yloc.price,text=ptext,color=color.blue,style=label.style_label_up,textcolor=color.white,size=size.small)
    else
        if (order_type == "stop")
            ptext = "!" + suffix
            label.new(x=ticker_index,y=ticker_close,yloc=yloc.price,text=ptext,color=color.red,style=label.style_label_up,textcolor=color.white,size=size.small)
        else 
            if (order_type == "profit")
                ptext = "$" + suffix
                label.new(x=ticker_index,y=ticker_close,yloc=yloc.price,text=ptext,color=color.green,style=label.style_label_up,textcolor=color.white,size=size.small)
    true

mark_ticker(tname,tclose,sigct)=>
    if (barstate.islast)
        clr = color_from_sigs(sigct)
        lbl = sigct < 3 ? color.white : color.black
        is_opt = optimum(sigct)
        label.new(x=bar_index - 20,y=tclose,yloc=yloc.price,text=str.tostring(tname),color=clr,style=label.style_label_up,textcolor=lbl,size=is_opt ? size.large : size.normal)

check_plot(price_action)=>
    if (PLOT_SCREENERS) 
        price_action
    else 
        na

buy_signal(sigct, sigct_prev)=>
    (double_signal(sigct) and single_signal(sigct_prev) and not double_signal(sigct_prev))
    // (optimum(sigct) and quad_signal(sigct_prev) and not optimum(sigct_prev))
    //(quad_signal(sigct) and not quad_signal(sigct_prev))

place_orders(ticker, qty, stop_percent, profit_percent, ticker_close, ticker_index, stack)=> 
    ticker_name = get_name(ticker)
    price_stop_loss = (ticker_close * (1.0 - stop_percent))
    price_profit = (ticker_close * (1.0 + profit_percent))
    if (array.size(stack) == 0)
        array.push(stack, price_profit)
        array.push(stack, price_stop_loss)
        mark_order("buy", ticker_name, ticker_close, ticker_index, ticker_close)
    if (strategy.position_size == 0)
        buy_id = "buy-" + ticker_name
        sell_id = "sell-" + ticker_name
        profit_id = "profit-" + ticker_name
        loss_id = "loss-" + ticker_name
        strategy.entry(buy_id, strategy.long, qty=qty, alert_message=buy_id)
        strategy.exit(sell_id, from_entry=buy_id, stop=price_stop_loss, limit=price_profit,alert_profit=profit_id,alert_loss=loss_id)

check_orders(stack, ticker, ticker_close, ticker_low, ticker_high, ticker_index)=>
    if (array.size(stack) == 2)
        ticker_name = get_name(ticker)
        price_stop_loss = array.get(stack, 1)
        price_profit = array.get(stack, 0)
        stop_triggered = (ticker_low < price_stop_loss and price_stop_loss < ticker_high)
        profit_triggered = (ticker_low < price_profit and price_profit < ticker_high)
        if (stop_triggered and profit_triggered)
            err("both stop and profit triggered")
        else
            if (stop_triggered)
                array.pop(stack)
                array.pop(stack)
                mark_order("stop", ticker_name, ticker_close, ticker_index, price_stop_loss)
            else
                if (profit_triggered)
                    array.pop(stack)
                    array.pop(stack)
                    mark_order("profit", ticker_name, ticker_close, ticker_index, price_profit)
        true
    false
        
run_screener_for(ticker, timeframe, dateStart, dateEnd, qty, ticker_52h_mult, ticker_52l_mult, ticker_bbbars, stop_percent, profit_percent, stack, runstrategy = true, ticker_bblen) => 
    [ emaPrice, sec_ma50, sec_ma150, sec_ma200, sec_hi52, sec_low52, sec_bbwavg, sec_open, sec_close, sec_low, sec_high, sec_bar_index ] = request.security(ticker, timeframe, screener_function(bblen=ticker_bblen))
    [sig1, sig2, sig3, sig4, sig5] = signals(sec_ma50, sec_ma150, sec_ma200, sec_hi52, ticker_52h_mult, sec_low52, ticker_52l_mult, sec_bbwavg, ticker_bbbars, sec_open, sec_close)
    [sig1_prev, sig2_prev, sig3_prev, sig4_prev, sig5_prev] = signals(sec_ma50[1], sec_ma150[1], sec_ma200[1], sec_hi52[1], ticker_52h_mult, sec_low52[1], ticker_52l_mult, sec_bbwavg[1], ticker_bbbars, sec_open[1], sec_close[1])
    sigct = signal_count(sig1, sig2, sig3, sig4, sig5)
    sigct_prev = signal_count(sig1_prev, sig2_prev, sig3_prev, sig4_prev, sig5_prev)
    if (in_time_window(dateStart, dateEnd) and runstrategy)
        check_alerts(ticker, sigct)
        mark_ticker(ticker, sec_close, sigct)
        if (buy_signal(sigct, sigct_prev))
            place_orders(ticker, qty, stop_percent, profit_percent, sec_close, bar_index, stack)
        else
            check_orders(stack, ticker, sec_close, sec_low, sec_high, bar_index)
    [ emaPrice, sec_ma50, sec_ma150, sec_ma200, sec_hi52, sec_low52, sec_bbwavg, sec_close, sigct ]

run_screener_default(ticker=syminfo.tickerid, orderstack, runstrategy=true)=>
    run_screener_for(ticker, timeframe.period, dateStart=START, dateEnd=FINISH, qty=ENTRY_QUANTITY, ticker_52h_mult=HI_52_WEEK_RANGE, ticker_52l_mult=LO_52_WEEK_RANGE, ticker_bbbars=CONTRACTION_BAR_COUNT, stop_percent=ENTRY_STOP_PERCENT, profit_percent=ENTRY_PROFIT_PERCENT, stack=orderstack, runstrategy=runstrategy, ticker_bblen=BOLLINGER_BAND_LEN)

run_screener_simple(ticker=syminfo.tickerid, orderstack, runstrategy=true)=>
    [ ema, ma50, ma150, ma200, hi52, low52, bbwavg, tclose, sigct ] = run_screener_default(ticker, orderstack, runstrategy)
    [ ema, sigct ]

//
// MAIN

// USE syminfo.tickerid for current chart

var float[] STACK = array.new_float(size = 0)
[ this_sec_ema, this_sec_ma50, this_sec_ma150, this_sec_ma200, this_sec_hi52, this_sec_low52, this_sec_bbwavg, this_sec_close, this_sec_sigct ] = run_screener_default(syminfo.tickerid, orderstack=STACK,runstrategy=RUN_STRATEGY)
plot(series=this_sec_ema, title="ema", color=color_from_sigs(this_sec_sigct), linewidth=4)

plot(series=PLOT_SIGNAL_PARAMS ? this_sec_ma50 : na, title="MA50", color=optimum(this_sec_sigct) ? color.white : color.lime, linewidth=2)
plot(series=PLOT_SIGNAL_PARAMS ? this_sec_ma150 : na, title="MA150", color=optimum(this_sec_sigct) ? color.white : color.green, linewidth=1)
plot(series=PLOT_SIGNAL_PARAMS ? this_sec_ma200 : na, title="MA200", color=optimum(this_sec_sigct) ? color.white : color.olive, linewidth=2)
plot(series=PLOT_SIGNAL_PARAMS ? this_sec_hi52 : na, title="52WK-High", color=optimum(this_sec_sigct) ? color.white : color.fuchsia, linewidth=1)
plot(series=PLOT_SIGNAL_PARAMS ? this_sec_low52 : na, title="52WK-Low", color=optimum(this_sec_sigct) ? color.white : color.purple, linewidth=1)
plot(series=PLOT_SIGNAL_PARAMS ? this_sec_hi52 - ((this_sec_hi52 - this_sec_low52) * HI_52_WEEK_RANGE) : na, title="52WK-Range-High", color=optimum(this_sec_sigct) ? color.white : color.green, linewidth=1, style=plot.style_cross)
plot(series=PLOT_SIGNAL_PARAMS ? this_sec_low52 + ((this_sec_hi52 - this_sec_low52) * LO_52_WEEK_RANGE) : na, title="52WK-Range-Low", color=optimum(this_sec_sigct) ? color.white : color.red, linewidth=1, style=plot.style_cross)

[bb_low, bb_cent, bb_high] = ta.bb(this_sec_close, BOLLINGER_BAND_LEN, 3) 
plot(series=PLOT_SIGNAL_PARAMS ? bb_low : na, title="Bol-Bands", color=ta.falling(this_sec_bbwavg*1000,CONTRACTION_BAR_COUNT) ? color.green : color.orange, linewidth=1, style=plot.style_cross)
plot(series=PLOT_SIGNAL_PARAMS ? bb_high : na, title="Bol-Bands", color=ta.falling(this_sec_bbwavg*1000,CONTRACTION_BAR_COUNT) ? color.green : color.orange, linewidth=1, style=plot.style_cross)
//plot(series=PLOT_SIGNAL_PARAMS ? this_sec_bbwavg*100 : na, title="Bol-Bands-Avg", color=ta.falling(this_sec_bbwavg*1000,CONTRACTION_BAR_COUNT) ? color.green : color.maroon, linewidth=2, style=plot.style_cross)

//
// PLOT: Take Profit and Stop Loss price targets
// plot(series=(PLOT_SIGNAL_PARAMS and barstate.islast) ? this_sec_close * ENTRY_PROFIT_PERCENT : na, title="take-profit", color=color.lime, linewidth=3, style=plot.style_line)
//plot(series=(PLOT_SIGNAL_PARAMS and barstate.islast) ? this_sec_close * ENTRY_STOP_PERCENT : na, title="stop-loss", color=color.red, linewidth=3, style=plot.style_line)
if (barstate.islast and PLOT_SIGNAL_PARAMS)
    profit_mark = this_sec_close * (1.0 + ENTRY_PROFIT_PERCENT)
    stop_mark = this_sec_close * (1.0 - ENTRY_STOP_PERCENT)
    label.new(x=bar_index,y=profit_mark,yloc=yloc.price,text=str.tostring(profit_mark),color=color.lime,style=label.style_label_left,textcolor=color.black,size=size.small)
    label.new(x=bar_index,y=stop_mark,yloc=yloc.price,text=str.tostring(stop_mark),color=color.red,style=label.style_label_left,textcolor=color.black,size=size.small)

///////////////////////////////////////
// SP500
// comparison plot
///////////////////////////////////////

var float[] SP500STACK = array.new_float(size = 0)
[ sp500ema, sp500sigct ] = run_screener_simple("NASDAQ:QQQ", orderstack=SP500STACK, runstrategy=(PLOT_SP500 and RUN_STRATEGY))
plot(series=PLOT_SP500 ? sp500ema : na, title="sp500_ema", color=color_from_sigs(sp500sigct), linewidth=4)

///////////////////////////////////////
// SP500 - Volatility
// comparison plot
///////////////////////////////////////

var float[] VIXSTACK = array.new_float(size = 0)
[ vixema, vixsigct ] = run_screener_simple("TVC:VIX", orderstack=VIXSTACK, runstrategy=(PLOT_VIX and RUN_STRATEGY))
plot(series=PLOT_VIX ? (vixema * 1) : na, title="VIX_ema", color=color.maroon, linewidth=3)


///////////////////////////////////////
// ADDTL SCREENERS
// comparison plots
///////////////////////////////////////


//var float[] ESSTACK = array.new_float(size = 0)
//[ ESema, ESsigct ] = run_screener_simple("NYSE:ES", orderstack=ESSTACK, runstrategy=(RUN_STRATEGY and PLOT_SCREENERS))
//plot(series=PLOT_SCREENERS ? ESema : na, title="ES_ema", color=color_from_sigs(ESsigct), linewidth=4)

//var float[] SMHSTACK = array.new_float(size = 0)
//[ SMHema, SMHsigct ] = run_screener_simple("NASDAQ:SMH", orderstack=SMHSTACK, runstrategy=(RUN_STRATEGY and PLOT_SCREENERS))
//plot(series=PLOT_SCREENERS ? SMHema : na, title="SMH_ema", color=color_from_sigs(SMHsigct), linewidth=4)

//var float[] DECKSTACK = array.new_float(size = 0)
//[ DECKema, DECKsigct ] = run_screener_simple("NYSE:DECK", orderstack=DECKSTACK, runstrategy=(RUN_STRATEGY and PLOT_SCREENERS))
//plot(series=PLOT_SCREENERS ? DECKema : na, title="DECK_ema", color=color_from_sigs(DECKsigct), linewidth=4)
